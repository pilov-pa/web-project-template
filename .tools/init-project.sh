#!/usr/bin/env bash
set -e

add_host_entry() {
  local domain="$1"
  local ip="127.0.0.1"
  local hosts_file

  if [[ "$OSTYPE" == "msys" || "$OSTYPE" == "win32" ]]; then
    hosts_file="/c/Windows/System32/drivers/etc/hosts"
  else
    hosts_file="/etc/hosts"
  fi

  if grep -qE "^\s*${ip}\s+${domain}\b" "$hosts_file"; then
    echo "‚úÖ $domain —É–∂–µ –µ—Å—Ç—å –≤ $hosts_file"
  else
    echo "üõ†Ô∏è –î–æ–±–∞–≤–ª—è—é $domain ‚Üí $ip –≤ $hosts_file..."
    if [[ "$OSTYPE" == "msys" || "$OSTYPE" == "win32" ]]; then
      echo -e "\n${ip} ${domain}" >> "$hosts_file" && echo "‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!"
    else
      echo -e "\n${ip} ${domain}" | sudo tee -a "$hosts_file" > /dev/null && echo "‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!"
    fi
  fi
}

SOCK_PATH="/var/run/docker.sock"
[[ "$OSTYPE" == "msys" ]] && SOCK_PATH="//var/run/docker.sock"

echo "üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞..."
read -rp "üëâ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞ (slug, –Ω–∞–ø—Ä–∏–º–µ—Ä: myapp): " PROJECT
[[ -z "$PROJECT" ]] && { echo "‚ùó –ò–º—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω—É–∂–Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"; exit 1; }

echo "‚öôÔ∏è –ó–∞–º–µ–Ω—è—é –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä {project} –Ω–∞ '$PROJECT'..."
sed -i "s/{project}/$PROJECT/g" docker-compose.yml
sed -i "s/{project}/$PROJECT/g" docker/nginx/default.conf

echo "üåê –ü—Ä–æ–≤–µ—Ä—è—é —Å–µ—Ç—å nginx-proxy..."
if ! docker network inspect nginx-proxy >/dev/null 2>&1; then
  echo "üåê –°–æ–∑–¥–∞—é —Å–µ—Ç—å nginx-proxy..."
  docker network create nginx-proxy
else
  echo "üåê –°–µ—Ç—å nginx-proxy —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
fi

if ! docker ps --filter name=nginx-proxy --filter status=running | grep nginx-proxy >/dev/null; then
  echo "üöÄ –ó–∞–ø—É—Å–∫–∞—é –æ–±—â–∏–π nginx-proxy..."
  docker run -d \
    --name nginx-proxy --restart always \
    -p 80:80 -v $SOCK_PATH:/tmp/docker.sock:ro \
    --network nginx-proxy jwilder/nginx-proxy
else
  echo "üöÄ nginx-proxy —É–∂–µ –∑–∞–ø—É—â–µ–Ω"
fi

echo "üê≥ –°–æ–±–∏—Ä–∞—é –∏ –∑–∞–ø—É—Å–∫–∞—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞..."
docker compose up -d --build

echo "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é Symfony –≤–Ω—É—Ç—Ä–∏ php-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
docker compose exec -u root php bash -lc "
  set -euo pipefail
  TMP=\$(mktemp -d)
  echo '>> –°–æ–∑–¥–∞—é Symfony –≤ \$TMP/app'
  COMPOSER_CACHE_DIR=/tmp/composer composer create-project symfony/skeleton:^7.1 \"\$TMP/app\" --no-interaction
  cd \"\$TMP/app\"
  composer require symfony/webapp-pack symfony/orm-pack --no-interaction
  composer require --dev symfony/maker-bundle --no-interaction
  shopt -s dotglob
  cp -an * /var/www/
  chown -R www-data:www-data /var/www || true
  echo '>> Symfony —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω.'
"

if [ -f package.json ]; then
  echo "‚ö†Ô∏è React-–ø—Ä–æ–µ–∫—Ç —É–∂–µ —Å–æ–∑–¥–∞–Ω. –ü—Ä–æ–ø—É—Å–∫–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ."
else
  echo "‚öõÔ∏è –°–æ–∑–¥–∞—é React-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ frontend-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ..."
  rm -rf ./frontend/*
  docker compose exec -u root frontend sh -lc '
    pwd
    ls -la
    npx --yes create-vite@latest ./ --template react-ts
    pwd
    ls -la
    echo "üå∏ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é TailwindCSS..."
    yarn add -D tailwindcss postcss autoprefixer
    npx tailwindcss init -p

    echo "/** @type {import('tailwindcss').Config} */" > tailwind.config.js
    echo "module.exports = { content: [\"./index.html\", \"./src/**/*.{js,ts,jsx,tsx}\"], theme: { extend: {}, }, plugins: [], };" >> tailwind.config.js

    echo "@tailwind base;\n@tailwind components;\n@tailwind utilities;" > src/index.css
  '
fi

echo "üåê –ü—Ä–æ–ø–∏—Å—ã–≤–∞—é BACKEND_URL –≤ frontend/.env"
echo "REACT_APP_BACKEND_URL=http://api.dev.$PROJECT" > frontend/.env

echo "üîß –î–æ–±–∞–≤–ª—è—é server.allowedHosts –≤ vite.config.ts..."

if [ -f frontend/vite.config.ts ]; then
  awk -v host="dev.$PROJECT" '
    BEGIN { patched = 0 }
    /defineConfig\(\{/ && !patched {
      print
      print "  server: {"
      print "    allowedHosts: [\"" host "\"],"
      print "  },"
      patched = 1
      next
    }
    { print }
  ' frontend/vite.config.ts > frontend/vite.config.ts.tmp && mv frontend/vite.config.ts.tmp frontend/vite.config.ts
fi

add_host_entry "dev.$PROJECT"
add_host_entry "api.dev.$PROJECT"

if [ -d .git ]; then
  read -rp "‚ùì –£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π .git –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π? [y/N]: " answer
  if [[ "$answer" =~ ^[Yy]$ ]]; then
    rm -rf .git && git init && echo "‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–±—Ä–æ—à–µ–Ω."
  fi
fi

rm -rf ./.tools

echo ""
echo "üéâ –ì–æ—Ç–æ–≤–æ! –ü—Ä–æ–µ–∫—Ç '$PROJECT' —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç."
echo "üìÇ –ü–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞: $(pwd)"
echo "üåç –§—Ä–æ–Ω—Ç:  http://dev.$PROJECT"
echo "üì° API:    http://api.dev.$PROJECT"
